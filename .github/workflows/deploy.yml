name: Deploy TaskFlow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-central-1
  TF_VERSION: 1.5.0

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra/envs/dev
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Format Check
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -no-color
      continue-on-error: true

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve

  build-frontend:
    name: 'Build Frontend'
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: ./infra/envs/dev
      run: terraform init

    - name: Install dependencies
      working-directory: ./web/dev/frontend
      run: npm install

    - name: Get Terraform outputs
      working-directory: ./infra/envs/dev
      run: |
        echo "VITE_API_BASE=$(terraform output -raw http_api_url)" >> $GITHUB_ENV
        echo "VITE_COGNITO_DOMAIN=https://$(terraform output -raw cognito_domain)" >> $GITHUB_ENV
        echo "VITE_COGNITO_CLIENT_ID=$(terraform output -raw cognito_client_id)" >> $GITHUB_ENV

    - name: Build frontend
      working-directory: ./web/dev/frontend
      run: |
        CLOUDFRONT_DOMAIN=$(terraform -chdir=../../../infra/envs/dev output -raw cloudfront_domain)
        echo "VITE_API_BASE=${{ env.VITE_API_BASE }}" > .env.production
        echo "VITE_COGNITO_DOMAIN=${{ env.VITE_COGNITO_DOMAIN }}" >> .env.production
        echo "VITE_COGNITO_CLIENT_ID=${{ env.VITE_COGNITO_CLIENT_ID }}" >> .env.production
        echo "VITE_COGNITO_REDIRECT=https://${CLOUDFRONT_DOMAIN}/" >> .env.production
        cat .env.production
        npm run build

    - name: Deploy to S3
      working-directory: ./web/dev/frontend
      run: |
        BUCKET_NAME=$(terraform -chdir=../../../infra/envs/dev output -raw frontend_bucket_name)
        aws s3 sync dist/ s3://$BUCKET_NAME --delete

    - name: Invalidate CloudFront
      run: |
        DISTRIBUTION_ID=$(terraform -chdir=./infra/envs/dev output -raw cloudfront_distribution_id)
        aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
